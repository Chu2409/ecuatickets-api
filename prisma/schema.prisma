generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum PassengerType {
  NORMAL
  DISABLED
  SENIOR
  MINOR
}

enum PaymentMethod {
  CASH
  TRANSFER
  PAYPAL
}

enum RouteStatus {
  GENERATED
  IN_PROGRESS
  COMPLETED
}

enum RouteMode {
  AUTOMATIC
  MANUAL
}

enum NotificationType {
  EMAIL
  PUSH
}

enum UserRole {
  COMPANY
  CLERK
  CUSTOMER
  DRIVER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement()) @map("id")
  name      String   @map("name")
  surname   String   @map("surname")
  dni       String   @unique @map("dni")
  email     String   @unique @map("email")
  username  String   @unique @map("username")
  password  String   @map("password")
  role      UserRole @map("role")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  companyId Int?     @map("company_id")
  company   Company? @relation(fields: [companyId], references: [id])

  notifications Notification[]
  ticketScans   TicketScan[]
  Payment       Payment[]

  @@map("users")
}

model Company {
  id             Int      @id @default(autoincrement()) @map("id")
  name           String   @map("name")
  logoUrl        String?  @map("logo_url")
  supportContact String?  @map("support_contact")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  users                User[]
  buses                Bus[]
  frequencies          Frequency[]
  CompanyCustomization CompanyCustomization[]
  Payment              Payment[]

  @@map("companies")
}

model City {
  id       Int    @id @default(autoincrement()) @map("id")
  name     String @map("name")
  province String @map("province")

  originFrecuencies      Frequency[]        @relation("FrequencyOrigin")
  destinationFrecuencies Frequency[]        @relation("FrequencyDestination")
  originTickets          Ticket[]           @relation("TicketOrigin")
  destinationTickets     Ticket[]           @relation("TicketDestination")
  intermediateStops      IntermediateStop[]

  @@unique([name, province])
  @@map("cities")
}

model Frequency {
  id         Int      @id @default(autoincrement()) @map("id")
  time       String   @map("time")
  resolution String   @map("previous_resolution")
  active     Boolean  @default(true) @map("active")
  createdAt  DateTime @default(now()) @map("created_at")

  companyId     Int     @map("company_id")
  company       Company @relation(fields: [companyId], references: [id])
  originId      Int     @map("origin_city_id")
  origin        City    @relation("FrequencyOrigin", fields: [originId], references: [id])
  destinationId Int     @map("destination_city_id")
  destination   City    @relation("FrequencyDestination", fields: [destinationId], references: [id])

  stops       IntermediateStop[]
  routeSheets RouteSheet[]

  @@map("frequencies")
}

model IntermediateStop {
  id    Int @id @default(autoincrement()) @map("id")
  order Int @map("order")

  frequencyId Int       @map("frequency_id")
  frequency   Frequency @relation(fields: [frequencyId], references: [id])
  cityId      Int       @map("city_id")
  city        City      @relation(fields: [cityId], references: [id])

  @@map("intermediate_stops")
}

model Bus {
  id             Int     @id @default(autoincrement()) @map("id")
  internalNumber String  @map("internal_number")
  licensePlate   String  @unique @map("license_plate")
  chassisBrand   String  @map("chassis_brand")
  bodyBrand      String  @map("body_brand")
  photoUrl       String? @map("photo_url")
  isActive       Boolean @default(true) @map("is_active")

  companyId Int     @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  seatConfigurations SeatConfiguration[]
  physicalSeats      PhysicalSeat[]
  routeSheets        RouteSheet[]

  @@map("buses")
}

model SeatType {
  id           Int     @id @default(autoincrement()) @map("id")
  name         String  @unique @map("name")
  description  String? @map("description")
  valueToApply Float   @map("value_to_apply")

  seatConfigurations SeatConfiguration[]
  physicalSeats      PhysicalSeat[]

  @@map("seat_types")
}

model SeatConfiguration {
  id       Int @id @default(autoincrement()) @map("id")
  quantity Int @map("quantity")

  busId      Int      @map("bus_id")
  bus        Bus      @relation(fields: [busId], references: [id])
  seatTypeId Int      @map("seat_type_id")
  seatType   SeatType @relation(fields: [seatTypeId], references: [id])

  @@map("seat_configurations")
}

model PhysicalSeat {
  id         Int    @id @default(autoincrement()) @map("id")
  seatNumber String @map("seat_number")
  row        Int?   @map("row")
  column     Int?   @map("column")
  floor      Int?   @map("floor")

  busId      Int      @map("bus_id")
  bus        Bus      @relation(fields: [busId], references: [id])
  seatTypeId Int      @map("seat_type_id")
  seatType   SeatType @relation(fields: [seatTypeId], references: [id])

  tickets Ticket[]

  @@map("physical_seats")
}

model RouteSheet {
  id     Int         @id @default(autoincrement()) @map("id")
  date   DateTime    @map("date")
  status RouteStatus @map("status")
  mode   RouteMode   @map("mode")

  frequencyId Int       @map("frequency_id")
  frequency   Frequency @relation(fields: [frequencyId], references: [id])
  busId       Int       @map("bus_id")
  bus         Bus       @relation(fields: [busId], references: [id])
  tickets     Ticket[]

  @@map("route_sheets")
}

model TicketScan {
  id        Int      @id @default(autoincrement()) @map("id")
  ticketId  Int      @map("ticket_id")
  userId    Int      @map("user_id")
  scannedAt DateTime @default(now()) @map("scanned_at")

  ticket Ticket @relation(fields: [ticketId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("ticket_scans")
}

model Notification {
  id        Int              @id @default(autoincrement()) @map("id")
  userId    Int              @map("user_id")
  message   String           @map("message")
  read      Boolean          @default(false) @map("read")
  type      NotificationType @map("type")
  createdAt DateTime         @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model CompanyCustomization {
  id        Int     @id @default(autoincrement()) @map("id")
  companyId Int     @unique @map("company_id")
  imageUrl  String? @map("image_url")
  company   Company @relation(fields: [companyId], references: [id])
  hexcode   String

  @@map("company_customizations")
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

model Payment {
  id                  Int           @id @default(autoincrement())
  amount              Float
  subtotal            Float
  taxes               Float?
  discounts           Float?
  paymentMethod       PaymentMethod
  status              PaymentStatus
  receiptUrl          String?
  paypalTransactionId String?
  bankReference       String?
  validatedBy         Int?
  validatedAt         DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  isOnlinePayment     Boolean       @default(false)
  userId              Int
  user                User          @relation(fields: [userId], references: [id])
  companyId           Int?
  company             Company?      @relation(fields: [companyId], references: [id])
  tickets             Ticket[]

  @@map("payments")
}

model Ticket {
  id             Int           @id @default(autoincrement()) @map("id")
  passengerId    String        @map("passenger_id") // Cédula o identificación
  passengerName  String        @map("passenger_name")
  passengerType  PassengerType @map("passenger_type")
  price          Float         @map("price") // Precio final (con descuentos)
  basePrice      Float         @map("base_price") // Precio sin descuentos
  discount       Float         @default(0) @map("discount") // Monto descontado
  accessCode     String        @unique @map("access_code") // Para QR
  status         String        @default("ACTIVE") @map("status") // ACTIVE, USED, CANCELLED
  paymentMethod  PaymentMethod @map("payment_method") // Copia del método de pago
  receiptUrl     String?       @map("receipt_url") // Comprobante individual
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  paymentId      Int?          @map("payment_id")
  payment        Payment?      @relation(fields: [paymentId], references: [id])
  routeSheetId   Int           @map("route_sheet_id")
  routeSheet     RouteSheet    @relation(fields: [routeSheetId], references: [id])
  physicalSeatId Int           @map("physical_seat_id")
  physicalSeat   PhysicalSeat  @relation(fields: [physicalSeatId], references: [id])
  originId       Int           @map("origin_city_id")
  origin         City          @relation("TicketOrigin", fields: [originId], references: [id])
  destinationId  Int           @map("destination_city_id")
  destination    City          @relation("TicketDestination", fields: [destinationId], references: [id])
  scans          TicketScan[]

  @@map("tickets")
}
