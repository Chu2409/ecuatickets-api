generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum PassengerType {
  NORMAL
  DISABLED
  SENIOR
  MINOR
}

enum PaymentMethod {
  CASH
  TRANSFER
  PAYPAL
}

enum RouteStatus {
  GENERATED
  IN_PROGRESS
  COMPLETED
}

enum RouteMode {
  AUTOMATIC
  MANUAL
}

enum NotificationType {
  EMAIL
  PUSH
}

enum UserRole {
  COMPANY
  CLERK
  CUSTOMER
  DRIVER
  ADMIN
}

model Person {
  id        Int      @id @default(autoincrement()) @map("id")
  name      String   @map("name")
  surname   String   @map("surname")
  dni       String   @unique @map("dni")
  email     String?  @unique @map("email")
  birthDate DateTime @map("birth_date")

  user User?

  tickets Ticket[]

  @@map("people")
}

model User {
  id        Int      @id @default(autoincrement()) @map("id")
  username  String   @unique @map("username")
  password  String   @map("password")
  role      UserRole @map("role")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  companyId Int?     @map("company_id")
  company   Company? @relation(fields: [companyId], references: [id])
  personId  Int      @unique @map("person_id")
  person    Person   @relation(fields: [personId], references: [id])

  notifications     Notification[]
  ticketScans       TicketScan[]
  validatedPayments Payment[]      @relation("PaymentValidatedBy")
  userPayments      Payment[]      @relation("PaymentUser")

  @@map("users")
}

model Company {
  id             Int      @id @default(autoincrement()) @map("id")
  name           String   @map("name")
  logoUrl        String?  @map("logo_url")
  supportContact String?  @map("support_contact")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  customization CompanyCustomization?

  users       User[]
  buses       Bus[]
  frequencies Frequency[]
  seatTypes   SeatType[]

  @@map("companies")
}

model City {
  id       Int    @id @default(autoincrement()) @map("id")
  name     String @map("name")
  province String @map("province")

  originFrecuencies        Frequency[]             @relation("FrequencyOrigin")
  destinationFrecuencies   Frequency[]             @relation("FrequencyDestination")
  originTickets            Ticket[]                @relation("TicketOrigin")
  destinationTickets       Ticket[]                @relation("TicketDestination")
  originSegmentPrices      FrequencySegmentPrice[] @relation("SegmentOrigin")
  destinationSegmentPrices FrequencySegmentPrice[] @relation("SegmentDestination")
  intermediateStops        IntermediateStop[]

  @@unique([name, province])
  @@map("cities")
}

model Frequency {
  id         Int      @id @default(autoincrement()) @map("id")
  time       String   @map("time")
  resolution String   @map("previous_resolution")
  active     Boolean  @default(true) @map("active")
  createdAt  DateTime @default(now()) @map("created_at")

  companyId     Int     @map("company_id")
  company       Company @relation(fields: [companyId], references: [id])
  originId      Int     @map("origin_city_id")
  origin        City    @relation("FrequencyOrigin", fields: [originId], references: [id])
  destinationId Int     @map("destination_city_id")
  destination   City    @relation("FrequencyDestination", fields: [destinationId], references: [id])

  stops         IntermediateStop[]
  routeSheets   RouteSheet[]
  segmentPrices FrequencySegmentPrice[]

  @@map("frequencies")
}

model FrequencySegmentPrice {
  id    Int   @id @default(autoincrement()) @map("id")
  price Float @map("price")

  frequencyId   Int       @map("frequency_id")
  frequency     Frequency @relation(fields: [frequencyId], references: [id])
  originId      Int       @map("origin_city_id")
  origin        City      @relation("SegmentOrigin", fields: [originId], references: [id])
  destinationId Int       @map("destination_city_id")
  destination   City      @relation("SegmentDestination", fields: [destinationId], references: [id])

  @@unique([frequencyId, originId, destinationId])
  @@map("frequency_segment_prices")
}

model IntermediateStop {
  id    Int @id @default(autoincrement()) @map("id")
  order Int @map("order")

  frequencyId Int       @map("frequency_id")
  frequency   Frequency @relation(fields: [frequencyId], references: [id])
  cityId      Int       @map("city_id")
  city        City      @relation(fields: [cityId], references: [id])

  @@map("intermediate_stops")
}

model Bus {
  id             Int     @id @default(autoincrement()) @map("id")
  internalNumber String  @map("internal_number")
  licensePlate   String  @unique @map("license_plate")
  chassisBrand   String  @map("chassis_brand")
  bodyBrand      String  @map("body_brand")
  photoUrl       String? @map("photo_url")
  isActive       Boolean @default(true) @map("is_active")

  companyId Int     @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  seatConfigurations SeatConfiguration[]
  physicalSeats      PhysicalSeat[]
  routeSheets        RouteSheet[]

  @@map("buses")
}

model SeatType {
  id           Int     @id @default(autoincrement()) @map("id")
  name         String  @unique @map("name")
  description  String? @map("description")
  valueToApply Float   @map("value_to_apply")

  companyId Int     @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  seatConfigurations SeatConfiguration[]
  physicalSeats      PhysicalSeat[]

  @@map("seat_types")
}

model SeatTemplate {
  id          Int     @id @default(autoincrement()) @map("id")
  name        String  @map("name") // ej: "Bus Est√°ndar 40 Asientos", "Bus VIP 28 Asientos"
  description String? @map("description")
  totalSeats  Int     @map("total_seats")
  rows        Int     @map("rows")
  columns     Int     @map("columns")
  floors      Int     @default(1) @map("floors")
  isActive    Boolean @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  
  templateSeats TemplateSeat[]
  
  @@map("seat_templates")
}

model TemplateSeat {
  id         Int     @id @default(autoincrement()) @map("id")
  seatNumber String  @map("seat_number") // ej: "1A", "2B", "3C"
  row        Int     @map("row")
  column     Int     @map("column")
  floor      Int     @default(1) @map("floor")
  isAisle    Boolean @default(false) @map("is_aisle") // si es pasillo (sin asiento)
  
  templateId Int          @map("template_id")
  template   SeatTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@unique([templateId, seatNumber])
  @@map("template_seats")
}

model SeatConfiguration {
  id       Int @id @default(autoincrement()) @map("id")
  quantity Int @map("quantity")

  busId      Int      @map("bus_id")
  bus        Bus      @relation(fields: [busId], references: [id])
  seatTypeId Int      @map("seat_type_id")
  seatType   SeatType @relation(fields: [seatTypeId], references: [id])

  @@map("seat_configurations")
}

model PhysicalSeat {
  id         Int     @id @default(autoincrement()) @map("id")
  seatNumber String  @map("seat_number")
  row        Int?    @map("row")
  column     Int?    @map("column")
  floor      Int?    @map("floor")
  isTaken    Boolean @default(false) @map("is_taken")

  busId      Int      @map("bus_id")
  bus        Bus      @relation(fields: [busId], references: [id])
  seatTypeId Int      @map("seat_type_id")
  seatType   SeatType @relation(fields: [seatTypeId], references: [id])

  tickets Ticket[]

  @@map("physical_seats")
}

model RouteSheet {
  id     Int         @id @default(autoincrement()) @map("id")
  date   DateTime    @map("date")
  status RouteStatus @map("status")
  mode   RouteMode   @map("mode")

  frequencyId Int       @map("frequency_id")
  frequency   Frequency @relation(fields: [frequencyId], references: [id])
  busId       Int       @map("bus_id")
  bus         Bus       @relation(fields: [busId], references: [id])

  tickets Ticket[]

  @@map("route_sheets")
}

model TicketScan {
  id        Int      @id @default(autoincrement()) @map("id")
  ticketId  Int      @map("ticket_id")
  userId    Int      @map("user_id")
  scannedAt DateTime @default(now()) @map("scanned_at")

  ticket Ticket @relation(fields: [ticketId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("ticket_scans")
}

model Notification {
  id        Int              @id @default(autoincrement()) @map("id")
  userId    Int              @map("user_id")
  message   String           @map("message")
  read      Boolean          @default(false) @map("read")
  type      NotificationType @map("type")
  createdAt DateTime         @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model CompanyCustomization {
  id       Int     @id @default(autoincrement()) @map("id")
  imageUrl String? @map("image_url")
  hexcode  String

  companyId Int     @unique @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  @@map("company_customizations")
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

model Payment {
  id                  Int           @id @default(autoincrement()) @map("id")
  subtotal            Float         @map("subtotal")
  discounts           Float?        @map("discounts")
  total               Float         @map("total")
  paymentMethod       PaymentMethod @map("payment_method")
  status              PaymentStatus @map("status")
  receiptUrl          String?       @map("receipt_url")
  paypalTransactionId String?       @map("paypal_transaction_id")
  bankReference       String?       @map("bank_reference")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  isOnlinePayment     Boolean       @default(false) @map("is_online_payment")
  validatedAt         DateTime?     @map("validated_at")

  validatedBy     Int?  @map("validated_by")
  validatedByUser User? @relation("PaymentValidatedBy", fields: [validatedBy], references: [id])
  userId          Int   @map("user_id")
  user            User  @relation("PaymentUser", fields: [userId], references: [id])

  tickets Ticket[]

  @@map("payments")
}

enum TicketStatus {
  ACTIVE
  USED
  CANCELLED
}

model Ticket {
  id            Int           @id @default(autoincrement()) @map("id")
  price         Float         @map("price")
  basePrice     Float         @map("base_price")
  discount      Float         @default(0) @map("discount")
  accessCode    String        @unique @map("access_code")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  passengerType PassengerType @map("passenger_type")
  status        TicketStatus  @default(ACTIVE) @map("status")

  passengerId    Int          @map("passenger_id")
  passenger      Person       @relation(fields: [passengerId], references: [id])
  paymentId      Int          @map("payment_id")
  payment        Payment      @relation(fields: [paymentId], references: [id])
  routeSheetId   Int          @map("route_sheet_id")
  routeSheet     RouteSheet   @relation(fields: [routeSheetId], references: [id])
  physicalSeatId Int          @map("physical_seat_id")
  physicalSeat   PhysicalSeat @relation(fields: [physicalSeatId], references: [id])
  originId       Int          @map("origin_city_id")
  origin         City         @relation("TicketOrigin", fields: [originId], references: [id])
  destinationId  Int          @map("destination_city_id")
  destination    City         @relation("TicketDestination", fields: [destinationId], references: [id])

  scans TicketScan[]

  @@map("tickets")
}
